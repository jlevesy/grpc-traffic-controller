/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// RetryPolicyApplyConfiguration represents an declarative configuration of the RetryPolicy type for use
// with apply.
type RetryPolicyApplyConfiguration struct {
	RetryOn    []string                        `json:"retryOn,omitempty"`
	NumRetries *uint32                         `json:"numRetries,omitempty"`
	Backoff    *RetryBackoffApplyConfiguration `json:"backoff,omitempty"`
}

// RetryPolicyApplyConfiguration constructs an declarative configuration of the RetryPolicy type for use with
// apply.
func RetryPolicy() *RetryPolicyApplyConfiguration {
	return &RetryPolicyApplyConfiguration{}
}

// WithRetryOn adds the given value to the RetryOn field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RetryOn field.
func (b *RetryPolicyApplyConfiguration) WithRetryOn(values ...string) *RetryPolicyApplyConfiguration {
	for i := range values {
		b.RetryOn = append(b.RetryOn, values[i])
	}
	return b
}

// WithNumRetries sets the NumRetries field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NumRetries field is set to the value of the last call.
func (b *RetryPolicyApplyConfiguration) WithNumRetries(value uint32) *RetryPolicyApplyConfiguration {
	b.NumRetries = &value
	return b
}

// WithBackoff sets the Backoff field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Backoff field is set to the value of the last call.
func (b *RetryPolicyApplyConfiguration) WithBackoff(value *RetryBackoffApplyConfiguration) *RetryPolicyApplyConfiguration {
	b.Backoff = value
	return b
}
