/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// BackendApplyConfiguration represents an declarative configuration of the Backend type for use
// with apply.
type BackendApplyConfiguration struct {
	Weight         *uint32                           `json:"weight,omitempty"`
	MaxRequests    *uint32                           `json:"maxRequests,omitempty"`
	LBPolicy       *string                           `json:"lbPolicy,omitempty"`
	RingHashConfig *RingHashConfigApplyConfiguration `json:"ringHashConfig,omitempty"`
	Interceptors   []InterceptorApplyConfiguration   `json:"interceptors,omitempty"`
	Service        *ServiceRefApplyConfiguration     `json:"service,omitempty"`
	Localities     []LocalityApplyConfiguration      `json:"localities,omitempty"`
}

// BackendApplyConfiguration constructs an declarative configuration of the Backend type for use with
// apply.
func Backend() *BackendApplyConfiguration {
	return &BackendApplyConfiguration{}
}

// WithWeight sets the Weight field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Weight field is set to the value of the last call.
func (b *BackendApplyConfiguration) WithWeight(value uint32) *BackendApplyConfiguration {
	b.Weight = &value
	return b
}

// WithMaxRequests sets the MaxRequests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxRequests field is set to the value of the last call.
func (b *BackendApplyConfiguration) WithMaxRequests(value uint32) *BackendApplyConfiguration {
	b.MaxRequests = &value
	return b
}

// WithLBPolicy sets the LBPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LBPolicy field is set to the value of the last call.
func (b *BackendApplyConfiguration) WithLBPolicy(value string) *BackendApplyConfiguration {
	b.LBPolicy = &value
	return b
}

// WithRingHashConfig sets the RingHashConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RingHashConfig field is set to the value of the last call.
func (b *BackendApplyConfiguration) WithRingHashConfig(value *RingHashConfigApplyConfiguration) *BackendApplyConfiguration {
	b.RingHashConfig = value
	return b
}

// WithInterceptors adds the given value to the Interceptors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Interceptors field.
func (b *BackendApplyConfiguration) WithInterceptors(values ...*InterceptorApplyConfiguration) *BackendApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInterceptors")
		}
		b.Interceptors = append(b.Interceptors, *values[i])
	}
	return b
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *BackendApplyConfiguration) WithService(value *ServiceRefApplyConfiguration) *BackendApplyConfiguration {
	b.Service = value
	return b
}

// WithLocalities adds the given value to the Localities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Localities field.
func (b *BackendApplyConfiguration) WithLocalities(values ...*LocalityApplyConfiguration) *BackendApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithLocalities")
		}
		b.Localities = append(b.Localities, *values[i])
	}
	return b
}
