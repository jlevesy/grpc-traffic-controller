/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/jlevesy/grpc-traffic-controller/api/gtc/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// XDSServiceLister helps list XDSServices.
// All objects returned here must be treated as read-only.
type XDSServiceLister interface {
	// List lists all XDSServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.XDSService, err error)
	// XDSServices returns an object that can list and get XDSServices.
	XDSServices(namespace string) XDSServiceNamespaceLister
	XDSServiceListerExpansion
}

// xDSServiceLister implements the XDSServiceLister interface.
type xDSServiceLister struct {
	indexer cache.Indexer
}

// NewXDSServiceLister returns a new XDSServiceLister.
func NewXDSServiceLister(indexer cache.Indexer) XDSServiceLister {
	return &xDSServiceLister{indexer: indexer}
}

// List lists all XDSServices in the indexer.
func (s *xDSServiceLister) List(selector labels.Selector) (ret []*v1alpha1.XDSService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.XDSService))
	})
	return ret, err
}

// XDSServices returns an object that can list and get XDSServices.
func (s *xDSServiceLister) XDSServices(namespace string) XDSServiceNamespaceLister {
	return xDSServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// XDSServiceNamespaceLister helps list and get XDSServices.
// All objects returned here must be treated as read-only.
type XDSServiceNamespaceLister interface {
	// List lists all XDSServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.XDSService, err error)
	// Get retrieves the XDSService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.XDSService, error)
	XDSServiceNamespaceListerExpansion
}

// xDSServiceNamespaceLister implements the XDSServiceNamespaceLister
// interface.
type xDSServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all XDSServices in the indexer for a given namespace.
func (s xDSServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.XDSService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.XDSService))
	})
	return ret, err
}

// Get retrieves the XDSService from the indexer for a given namespace and name.
func (s xDSServiceNamespaceLister) Get(name string) (*v1alpha1.XDSService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("xdsservice"), name)
	}
	return obj.(*v1alpha1.XDSService), nil
}
