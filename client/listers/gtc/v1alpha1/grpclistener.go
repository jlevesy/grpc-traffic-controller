/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/jlevesy/grpc-traffic-controller/api/gtc/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GRPCListenerLister helps list GRPCListeners.
// All objects returned here must be treated as read-only.
type GRPCListenerLister interface {
	// List lists all GRPCListeners in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GRPCListener, err error)
	// GRPCListeners returns an object that can list and get GRPCListeners.
	GRPCListeners(namespace string) GRPCListenerNamespaceLister
	GRPCListenerListerExpansion
}

// gRPCListenerLister implements the GRPCListenerLister interface.
type gRPCListenerLister struct {
	indexer cache.Indexer
}

// NewGRPCListenerLister returns a new GRPCListenerLister.
func NewGRPCListenerLister(indexer cache.Indexer) GRPCListenerLister {
	return &gRPCListenerLister{indexer: indexer}
}

// List lists all GRPCListeners in the indexer.
func (s *gRPCListenerLister) List(selector labels.Selector) (ret []*v1alpha1.GRPCListener, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GRPCListener))
	})
	return ret, err
}

// GRPCListeners returns an object that can list and get GRPCListeners.
func (s *gRPCListenerLister) GRPCListeners(namespace string) GRPCListenerNamespaceLister {
	return gRPCListenerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GRPCListenerNamespaceLister helps list and get GRPCListeners.
// All objects returned here must be treated as read-only.
type GRPCListenerNamespaceLister interface {
	// List lists all GRPCListeners in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GRPCListener, err error)
	// Get retrieves the GRPCListener from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GRPCListener, error)
	GRPCListenerNamespaceListerExpansion
}

// gRPCListenerNamespaceLister implements the GRPCListenerNamespaceLister
// interface.
type gRPCListenerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GRPCListeners in the indexer for a given namespace.
func (s gRPCListenerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GRPCListener, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GRPCListener))
	})
	return ret, err
}

// Get retrieves the GRPCListener from the indexer for a given namespace and name.
func (s gRPCListenerNamespaceLister) Get(name string) (*v1alpha1.GRPCListener, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("grpclistener"), name)
	}
	return obj.(*v1alpha1.GRPCListener), nil
}
