# gRFC A27 examples
# https://github.com/grpc/proposal/blob/master/A27-xds-global-load-balancing.md
---
# Basic example: one listeners maps to a route and a single K8s service
# Listener address: xds:///echo-server/basic
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: basic
  namespace: echo-server
spec:
  routes:
    - backends:
        - service:
             name: echo-server-v1
             port:
                name: grpc
---
# Basic example: one listeners maps to a route and a single K8s service
# Listener address: xds:///echo-server/basic-v2
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: basic-v2
  namespace: echo-server
spec:
  routes:
    - backends:
        - service:
             name: echo-server-v2
             port:
                name: grpc
---
# Locality based Weighted Round Robin: This example makes all gRPC clients using this listener send 20% of their traffic to
# the v2 instance of the echo-server, and 80% to the v1 instance.
# Listener address: xds:///echo-server/locality-wrr
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: locality-wrr
  namespace: echo-server
spec:
  routes:
    - backends:
        - localities:
            - weight: 80
              service:
                name: echo-server-v1
                port:
                  name: grpc
            - weight: 20
              service:
                name: echo-server-v2
                port:
                  name: grpc
---
# Locality fallback: This example makes all gRPC clients using this listener send 100% the the `echo-server-v2` service
# but fall back to the v1 instance if the v2 service goes down.
# Listener address: xds:///echo-server/fallback
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: fallback
  namespace: echo-server
spec:
  routes:
    - backends:
        - localities:
            - priority: 1
              service:
                name: echo-server-v1
                port:
                  name: grpc
            - priority: 0
              service:
                name: echo-server-v2
                port:
                  name: grpc
---
# gRFC A28 examples
# https://github.com/grpc/proposal/blob/master/A28-xds-traffic-splitting-and-routing.md
---
# Method based routing: Only calls to the `echo.Echo/EchoPremium` method are routed to the v2 instance.
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: method-matcher
  namespace: echo-server
spec:
  routes:
    - matcher:
        method:
          namespace: echo
          service: Echo
          method: EchoPremium
      backends:
        - service:
            name: echo-server-v2
            port:
              name: grpc
    - backends:
        - service:
            name: echo-server-v1
            port:
              name: grpc
---
# Service based routing: Only calls to the `echo.Echo` service are routed to the v2 instance.
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: service-matcher
  namespace: echo-server
spec:
  routes:
    - matcher:
        service:
          namespace: echo
          service: Echo
      backends:
        - service:
            name: echo-server-v2
            port:
              name: grpc
    - backends:
        - service:
            name: echo-server-v1
            port:
              name: grpc
---
# gRPC namespace based routing: Only calls to the services within the grpc `echo` namespace are routed to the v2 instance.
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: namespace-matcher
  namespace: echo-server
spec:
  routes:
    - matcher:
        namespace: echo
      backends:
        - service:
            name: echo-server-v2
            port:
              name: grpc
    - backends:
        - service:
            name: echo-server-v1
            port:
              name: grpc
---
# Metadata based routing: Route calls v2 if the metadata "x-version" has the value "v2"
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: header-exact-matcher
  namespace: echo-server
spec:
  routes:
    - matcher:
        metadata:
          - name: x-version
            exact: v2
      backends:
        - service:
            name: echo-server-v2
            port:
              name: grpc
    - backends:
        - service:
            name: echo-server-v1
            port:
              name: grpc
---
# Fractional traffic splitting: 20% of calls go v2 the other 80% hit v1
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: fraction-matcher
  namespace: echo-server
spec:
  routes:
    - matcher:
        fraction:
          numerator: 20
      backends:
        - service:
            name: echo-server-v2
            port:
              name: grpc
    - backends:
        - service:
            name: echo-server-v1
            port:
              name: grpc
---
# Max Concurrent Requests on a backend. No more than 20 concurent calls to the same backend.
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: max-requests
  namespace: echo-server
spec:
  routes:
    - backends:
        - maxRequests: 20
          service:
            name: echo-server-v1
            port:
              name: grpc
---
# Delay Injection filter fixed
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: delay-fault-injection
  namespace: echo-server
spec:
  interceptors:
    - fault:
        delay:
          fixed: 2s
          percentage:
            numerator: 50
  routes:
    - backends:
        - service:
            name: echo-server-v1
            port:
              name: grpc
---
# Fault Injection filter based on call metadata
# 100% of the calls with the meadata "x-envoy-fault-abort-grpc-request": "3" are going to be aborted with status 3
# 100% of the calls with the metadata "x-envoy-fault-delay-request": "5000" are going to be delayed by 5000ms
apiVersion: api.gtc.dev/v1alpha1
kind: GRPCListener
metadata:
  name: fault-injection-metadata
  namespace: echo-server
spec:
  interceptors:
    - fault:
        abort:
          metadata: {}
          percentage:
            numerator: 100
        delay:
          metadata: {}
          percentage:
            numerator: 100
  routes:
    - backends:
        - service:
            name: echo-server-v1
            port:
              name: grpc
